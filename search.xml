<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>段描述符各种属性</title>
      <link href="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
      <url>/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="段描述符和段选择子"><a href="#段描述符和段选择子" class="headerlink" title="段描述符和段选择子"></a>段描述符和段选择子</h1><h4 id="前景提要-上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？"><a href="#前景提要-上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？" class="headerlink" title="前景提要:上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？"></a><strong>前景提要:上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？</strong></h4><a id="more"></a><h3 id="1-GDT-全局描述符表-和LDT-局部描述符表"><a href="#1-GDT-全局描述符表-和LDT-局部描述符表" class="headerlink" title="1.GDT(全局描述符表)和LDT(局部描述符表)"></a>1.GDT(全局描述符表)和LDT(局部描述符表)</h3><h5 id="当我们执行类似MOV-DS-AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT-查找表的什么位置-查出多少数据"><a href="#当我们执行类似MOV-DS-AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT-查找表的什么位置-查出多少数据" class="headerlink" title="当我们执行类似MOV DS,AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT,查找表的什么位置,查出多少数据."></a>当我们执行类似MOV DS,AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT,查找表的什么位置,查出多少数据.</h5><h5 id="gdtr寄存器-48位-存储了2个值，gdt的地址和大小"><a href="#gdtr寄存器-48位-存储了2个值，gdt的地址和大小" class="headerlink" title="gdtr寄存器(48位)存储了2个值，gdt的地址和大小"></a>gdtr寄存器(48位)存储了2个值，gdt的地址和大小</h5><p>Windbg指令</p><ul><li>r gdtr        //查看gdt表的位置(0x8003F000 )</li><li>r gdtl         //查看gdt表的大小(0x3FF)</li><li>dd(dword)  4字节显示地址</li><li>dq(qword)  8字节显示地址(用`连接)  ==高位在前低位在后==</li><li>dq 8003F000 L40(显示40组)</li></ul><h3 id="2-段描述符-GDT表里存储的元素"><a href="#2-段描述符-GDT表里存储的元素" class="headerlink" title="2.段描述符:GDT表里存储的元素"></a>2.段描述符:GDT表里存储的元素</h3><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5C%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6.png" alt="段描述符"></p><h3 id="3-段选择子-段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符"><a href="#3-段选择子-段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符" class="headerlink" title="3.段选择子:段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符."></a>3.段选择子:段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符.</h3><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5C%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90.png" alt="段选择子"></p><p><strong><em>RPL：请求特权级别</em></strong></p><p><strong>TI=0 查GDT表</strong></p><p><strong>TI=1 查LDT表</strong></p><p><strong>Index：处理器将索引值乘以8在加上GDT或者LDT的基地址，就是要加载的段描述符</strong></p><h3 id="4、加载段描述符至段寄存器"><a href="#4、加载段描述符至段寄存器" class="headerlink" title="4、加载段描述符至段寄存器"></a>4、加载段描述符至段寄存器</h3><h5 id="除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器"><a href="#除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器" class="headerlink" title="除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器."></a>除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器.</h5><h5 id="CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲"><a href="#CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲" class="headerlink" title="CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲."></a>CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">6</span>];                    </span><br><span class="line">__asm                            </span><br><span class="line">&#123;            </span><br><span class="line">    les ecx,fword ptr ds:[buffer] <span class="comment">//高2个字节给es，低四个字节给ecx    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注意：RPL-lt-DPL-在数值上"><a href="#注意：RPL-lt-DPL-在数值上" class="headerlink" title="注意：RPL&lt;=DPL(在数值上)"></a>注意：RPL&lt;=DPL(在数值上)</h5><h3 id="5、段描述符与段寄存器的对应关系"><a href="#5、段描述符与段寄存器的对应关系" class="headerlink" title="5、段描述符与段寄存器的对应关系"></a>5、段描述符与段寄存器的对应关系</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WORD Selector; <span class="comment">//16位</span></span><br><span class="line"></span><br><span class="line">WORD Atrribute; <span class="comment">//16位</span></span><br><span class="line"></span><br><span class="line">DWORD Base; <span class="comment">//32位</span></span><br><span class="line"></span><br><span class="line">DWORD Limit; <span class="comment">//32位   FFFFFFFF </span></span><br></pre></td></tr></table></figure><hr><h3 id="6、段描述符PG位P位"><a href="#6、段描述符PG位P位" class="headerlink" title="6、段描述符PG位P位"></a>6、段描述符PG位P位</h3><p><strong>P = 1 段描述符有效</strong></p><p><strong>P = 0 段描述符无效</strong></p><p><strong>==G位决定了Limit==</strong></p><p><strong>G = 0 Limit 代表以字节为单位 最大为0xFFFFF</strong>(==因为段描述符里limit只占20位==)</p><p><strong>G = 1 Limit 代表以4kb为单位 最大为FFFFF x FFF(4096-1)=0xFFFFFFFF</strong></p><p>==<strong>FS对应的段描述符比较特殊，查分后的值与段寄存器中的值不符合，讲到操作系统（线程）的时候会解释.</strong>==</p><h3 id="7、S位和TYPE域"><a href="#7、S位和TYPE域" class="headerlink" title="7、S位和TYPE域"></a>7、S位和TYPE域</h3><p><strong>S = 1 代码段或者数据段描述符</strong></p><p><strong>S = 0 系统段描述符</strong> </p><p>![code and data](段描述符\code and data.png)</p><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5C%E7%B3%BB%E7%BB%9F%E6%AE%B5.png" alt="系统段"></p><p><strong>数据段说明</strong></p><p><strong>A 访问位，表示该位最后一次被操作系统清零后，该段是否被访问过.每当处理器将该段选择符置入某个段寄存器时，就将该位置1.</strong></p><p><strong>W 是否可写</strong></p><p><strong>E 扩展方向</strong><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5C%E6%89%A9%E5%B1%95%E6%96%B9%E5%90%91.png" alt="扩展方向"></p><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5C%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%AF%B4%E6%98%8E.png" alt="代码段说明"></p><h3 id="8、D-B位"><a href="#8、D-B位" class="headerlink" title="8、D/B位"></a>8、D/B位</h3><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5CDB%E4%BD%8D.png" alt="DB位"></p><h5 id="情况一：对CS段的影响"><a href="#情况一：对CS段的影响" class="headerlink" title="情况一：对CS段的影响"></a>情况一：对CS段的影响</h5><pre><code>D = 1 采用32位寻址方式    D = 0 采用16位寻址方式    前缀67 改变寻址方式    </code></pre><h5 id="情况二：对SS段的影响"><a href="#情况二：对SS段的影响" class="headerlink" title="情况二：对SS段的影响"></a>情况二：对SS段的影响</h5><pre><code>D = 1 隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP    D = 0 隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP    </code></pre><h5 id="情况三：向下拓展的数据段"><a href="#情况三：向下拓展的数据段" class="headerlink" title="情况三：向下拓展的数据段"></a>情况三：向下拓展的数据段</h5><pre><code>D = 1 段上线为4GB    D = 0 段上线为64KB    </code></pre><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5CDB%E5%BD%B1%E5%93%8D%E6%89%A9%E5%B1%95.png" alt="DB影响扩展"></p><h3 id="9、段权限检查"><a href="#9、段权限检查" class="headerlink" title="9、段权限检查"></a>9、段权限检查</h3><h5 id="CPU分级：1、2环-windows不使用，windows只有ring0和ring3"><a href="#CPU分级：1、2环-windows不使用，windows只有ring0和ring3" class="headerlink" title="CPU分级：1、2环 windows不使用，windows只有ring0和ring3"></a>CPU分级：1、2环 windows不使用，windows只有ring0和ring3</h5><h5 id><a href="#" class="headerlink" title></a><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5CCPU%E5%88%86%E7%BA%A7.png" alt="CPU分级"></h5><h5 id="如何查看程序处于几环"><a href="#如何查看程序处于几环" class="headerlink" title="如何查看程序处于几环?"></a>如何查看程序处于几环?</h5><p>CPL(Current Privilege Level) ：当前特权级  </p><p>CS和SS中存储的段选择子后2位. </p><p>用windbg是在ring 0，用DTdebug是在ring3</p><p><img src="/2020/09/29/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%5C%E6%9F%A5%E7%9C%8BCPL.png" alt="查看CPL"></p><h5 id="DPL-Descriptor-Privilege-Level-描述符特权级别"><a href="#DPL-Descriptor-Privilege-Level-描述符特权级别" class="headerlink" title="DPL(Descriptor Privilege Level) 描述符特权级别"></a>DPL(Descriptor Privilege Level) 描述符特权级别</h5><p>DPL存储在段描述符中，规定了访问该段**==所需要的特权级别==**是什么.</p><p>通俗的理解：</p><p>如果你想访问我，那么你应该具备什么特权.  </p><p>举例说明：mov DS,AX </p><p>如果AX指向的段DPL = 0 但当前程序的CPL = 3 这行指令是不会成功的！</p><h5 id="RPL-Request-Privilege-Level-请求特权级别"><a href="#RPL-Request-Privilege-Level-请求特权级别" class="headerlink" title="RPL(Request Privilege Level) 请求特权级别"></a>RPL(Request Privilege Level) 请求特权级别</h5><p>RPL是针对段选择子而言的，每个段的选择子都有自己的RPL。</p><h5 id="数据段的权限检查"><a href="#数据段的权限检查" class="headerlink" title="数据段的权限检查"></a><strong>数据段的权限检查</strong></h5><p>参考如下代码：</p><p>比如当前程序处于0环，也就是说CPL=0</p><p>Mov ax,000B //1011  RPL = 3</p><p>Mov ds,ax //ax指向的段描述符的DPL = 0</p><p>数据段的权限检查：**==CPL &lt;= DPL 并且 RPL &lt;= DPL==** (数值上的比较)</p><p><strong>注意：代码段和系统段描述符中的检查方式并不一样</strong></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong><em>CPL CPU当前的权限级别</em></strong></p><p><strong><em>DPL 如果你想访问我，你应该具备什么样的权限</em></strong></p><p><strong><em>RPL 用什么权限去访问一个段</em></strong></p><p><strong><em>为啥要有RPL?</em></strong></p><p>   <strong><em>我们本可以用“读 写”的权限去打开一个文件，但为了避免出错，有些时候我们使用“只读”的权限去打开。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段描述符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>段寄存器属性探测</title>
      <link href="/2020/09/29/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/29/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="保护模式和段寄存器"><a href="#保护模式和段寄存器" class="headerlink" title="保护模式和段寄存器"></a>保护模式和段寄存器</h1><h2 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h2><h3 id="1-什么是保护模式？"><a href="#1-什么是保护模式？" class="headerlink" title="1.什么是保护模式？"></a>1.什么是保护模式？</h3><p>x64 CPU的3个模式:实模式、保护模式和虚拟8086模式。</p><h3 id="2-为什么不直接讲x64的？"><a href="#2-为什么不直接讲x64的？" class="headerlink" title="2.为什么不直接讲x64的？"></a>2.为什么不直接讲x64的？</h3><p>X86是由Intel推出的一种复杂指令集，能够生产支持这种指令集CPU公司主要是Intel和AMD.   </p><p>AMD在1999年的时候，拓展了这套指令集，称为x86-64，后改名为AMD64，Intel也兼容了这个产品，称为Intel64.但AMD64和Intel64几乎是一样的，所以在很多资料中统称为×64.   </p><p><strong>这套指令集是对×86的拓展，向下兼容的.</strong>   </p><a id="more"></a><h3 id="3-保护模式有什么特点？"><a href="#3-保护模式有什么特点？" class="headerlink" title="3.保护模式有什么特点？"></a>3.保护模式有什么特点？</h3><ul><li><strong>段的机制</strong>   </li><li>**页的机制 **  </li></ul><h3 id="4-学习保护模式有什么用？"><a href="#4-学习保护模式有什么用？" class="headerlink" title="4.学习保护模式有什么用？"></a>4.学习保护模式有什么用？</h3><p><strong>真正理解内核是如何运作的</strong></p><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><h3 id="1、什么是段寄存器？有哪些？"><a href="#1、什么是段寄存器？有哪些？" class="headerlink" title="1、什么是段寄存器？有哪些？"></a>1、什么是段寄存器？有哪些？</h3><p>当我们用汇编读写某一个地址时：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov dword ptr ds:[<span class="number">0x123456</span>],eax</span><br></pre></td></tr></table></figure><p>我们真正读写的地址是：<strong>ds.base</strong>+0×123456</p><p>ES CS SS DS FS GS LDTR TR 共8个</p><h3 id="2、段寄存器的结构"><a href="#2、段寄存器的结构" class="headerlink" title="2、段寄存器的结构"></a>2、段寄存器的结构</h3><p><img src="/2020/09/29/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E6%9E%84%E6%88%90.png" alt="段寄存器"></p><h3 id="3、段寄存器的读写"><a href="#3、段寄存器的读写" class="headerlink" title="3、段寄存器的读写"></a>3、段寄存器的读写</h3><ul><li><p>读段寄存器</p><p> 比如:<code>MOV AX,ES</code>只能==读16位==的可见部分</p><p> 读写LDTR的指令为：  SLDT/LLDT</p><p> 读写TR的指令为：STR/LTR</p></li><li><p>写段寄存器</p><p>比如：<code>MOV DS,AX</code>写时是==写96位==</p></li></ul><h2 id="段寄存器属性探测"><a href="#段寄存器属性探测" class="headerlink" title="段寄存器属性探测"></a>段寄存器属性探测</h2><h3 id="1-段寄存器只能看见16位，如何证明有96位？"><a href="#1-段寄存器只能看见16位，如何证明有96位？" class="headerlink" title="1. 段寄存器只能看见16位，如何证明有96位？"></a>1. 段寄存器只能看见16位，如何证明有96位？</h3><h4 id="1-1、段寄存器成员简介"><a href="#1-1、段寄存器成员简介" class="headerlink" title="1.1、段寄存器成员简介"></a>1.1、段寄存器成员简介</h4><h3 id><a href="#" class="headerlink" title></a><img src="/2020/09/29/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%5C%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E6%88%90%E5%91%98.png" alt="段寄存器成员"></h3><h4 id="1-2、探测Attribute"><a href="#1-2、探测Attribute" class="headerlink" title="1.2、探测Attribute"></a>1.2、探测Attribute</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,ss <span class="comment">//ss可读可写</span></span><br><span class="line">        mov ds,ax </span><br><span class="line">        mov dword ptr ds:[var],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,cs <span class="comment">//cs可读可执行  不可写</span></span><br><span class="line">        mov ds,ax </span><br><span class="line">        mov dword ptr ds:[var],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>cs可读可执行==不可写==</strong>,所以下面的代码执行会报错，由此证明Attribute(权限)存在</p><h4 id="1-3、探测base"><a href="#1-3、探测base" class="headerlink" title="1.3、探测base"></a>1.3、探测base</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,fs</span><br><span class="line">        mov gs,ax</span><br><span class="line">        mov eax,gs:[<span class="number">0</span>]    <span class="comment">//不能使用ds 否则会出错(vc6) 原因可能与编译器有关</span></span><br><span class="line">        <span class="comment">//相当于</span></span><br><span class="line">        <span class="comment">//mov eax,dword ptr ds:[0x7FFDF000]   //这个地址是可以访问的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="这里有2个细节"><a href="#这里有2个细节" class="headerlink" title="这里有2个细节"></a>这里有2个细节</h6><ol><li><p><strong>0地址为保留地址，不可读不可写</strong></p></li><li><p><strong>不能在有关GS寄存器的地方下断点</strong></p><p>理由:下断点单步调试需要不断进出ring0，GS是被Windows废弃的寄存器，只要一进ring0就会被内核清空，如果你在mov gs,ax下断点，就会导致GS进ring0直接被清空,GS的值为NULL,所以会导致0xC0000005错误</p></li></ol><h4 id="1-4、探测limit"><a href="#1-4、探测limit" class="headerlink" title="1.4、探测limit"></a>1.4、探测limit</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,fs             </span><br><span class="line">        mov gs,ax</span><br><span class="line">           <span class="comment">//mov eax,gs:[0x1000] //0x7FFDF000+0x1000  0x1000 &gt;fs.limit=0xFFF </span></span><br><span class="line">        <span class="comment">//访问的地址相当于下面的 ds.limit=0xFFFFFFFF</span></span><br><span class="line">        mov eax,dword ptr ds:[<span class="number">0x7FFDF000</span>+<span class="number">0x1000</span>]</span><br><span class="line">        mov dword ptr ds:[var],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-写段寄存器时只给了16位，剩下的80位填什么？"><a href="#2-写段寄存器时只给了16位，剩下的80位填什么？" class="headerlink" title="2. 写段寄存器时只给了16位，剩下的80位填什么？"></a>2. 写段寄存器时只给了16位，剩下的80位填什么？</h3><h4 id="具体见下节内容"><a href="#具体见下节内容" class="headerlink" title="具体见下节内容"></a>具体见下节内容</h4>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段寄存器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双机调试</title>
      <link href="/2020/08/09/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>/2020/08/09/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="环境-win7-物理机-xp-sp3-虚拟机vm10"><a href="#环境-win7-物理机-xp-sp3-虚拟机vm10" class="headerlink" title="环境:win7(物理机)+xp sp3(虚拟机vm10)"></a>环境:win7(物理机)+xp sp3(虚拟机vm10)</h3><h4 id="采坑1-在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示"><a href="#采坑1-在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示" class="headerlink" title="采坑1.在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示"></a>采坑1.<strong>在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示</strong></h4><p><img src="/2020/08/09/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/01.png" alt="替代文字"></p><h6 id="如果是图上这种情况-你必须要在boot-ini的配置里填上com-2才行，而不是后面显示的-pipe-com-1"><a href="#如果是图上这种情况-你必须要在boot-ini的配置里填上com-2才行，而不是后面显示的-pipe-com-1" class="headerlink" title="如果是图上这种情况  你必须要在boot.ini的配置里填上com_2才行，而不是后面显示的\pipe\com_1"></a>如果是图上这种情况  你必须要在boot.ini的配置里填上com_2才行，而不是后面显示的\pipe\com_1</h6><h6 id="因此为了避免麻烦-建议创建虚拟机的时候就将打印机删除-并且添加串口，此时效果如下图"><a href="#因此为了避免麻烦-建议创建虚拟机的时候就将打印机删除-并且添加串口，此时效果如下图" class="headerlink" title="因此为了避免麻烦 建议创建虚拟机的时候就将打印机删除 并且添加串口，此时效果如下图"></a>因此为了避免麻烦 建议创建虚拟机的时候就将打印机删除 并且添加串口，此时效果如下图</h6><h4 id="采坑2-原先用wdk7600发现没有符号。"><a href="#采坑2-原先用wdk7600发现没有符号。" class="headerlink" title="采坑2.原先用wdk7600发现没有符号。"></a>采坑2.原先用wdk7600发现没有符号。</h4><h6 id="解决方案-下载sp3的符号包"><a href="#解决方案-下载sp3的符号包" class="headerlink" title="解决方案:下载sp3的符号包"></a>解决方案:下载sp3的符号包</h6><h6 id="Windbg-Symbols安装包（提取码：fvva）"><a href="#Windbg-Symbols安装包（提取码：fvva）" class="headerlink" title="Windbg+Symbols安装包（提取码：fvva）"></a><a href="https://pan.baidu.com/s/18kXlY7WKhaE7S5VnSLR-1Q">Windbg+Symbols</a>安装包（提取码：fvva）</h6><h4 id="默认安装在C-Windows-Symbol"><a href="#默认安装在C-Windows-Symbol" class="headerlink" title="默认安装在C:\Windows\Symbol"></a>默认安装在C:\Windows\Symbol</h4><p><img src="/2020/08/09/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/2.png" alt="替代文字"><br><img src="/2020/08/09/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/3.png" alt="替代文字"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 双机调试 </tag>
            
            <tag> windbg </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
