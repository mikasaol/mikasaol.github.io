<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>6.内存10-10-12分页</title>
      <link href="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/"/>
      <url>/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="五-内存10-10-12分页"><a href="#五-内存10-10-12分页" class="headerlink" title="五.内存10-10-12分页"></a>五.内存10-10-12分页</h1><h2 id="0、4GB内存空间"><a href="#0、4GB内存空间" class="headerlink" title="0、4GB内存空间"></a>0、4GB内存空间</h2><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/4GB.png" alt="4GB"></p><a id="more"></a><h2 id="1、物理地址"><a href="#1、物理地址" class="headerlink" title="1、物理地址"></a>1、物理地址</h2><p>线性地址、有效地址、物理地址</p><p>如下指令：</p><p>MOV eax,dword ptr ds:[0x12345678]</p><p>其中,0x12345678 是有效地址</p><p>ds.Base + 0x12345678 是线性地址</p><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/%E5%9C%B0%E5%9D%80.png" alt="地址"></p><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/%E8%99%9A%E6%8B%9F%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98.png" alt="虚拟物理内存"></p><h2 id="2、物理地址在哪里？"><a href="#2、物理地址在哪里？" class="headerlink" title="2、物理地址在哪里？"></a>2、物理地址在哪里？</h2><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80.png" alt="物理地址"></p><h2 id="3、设置分页方式"><a href="#3、设置分页方式" class="headerlink" title="3、设置分页方式"></a>3、设置分页方式</h2><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/%E8%AE%BE%E7%BD%AE%E5%88%86%E9%A1%B5%E6%96%B9%E5%BC%8F.png" alt="设置分页方式"></p><p>将noexecute 改成 execute</p><h2 id="4、10-10-12分页"><a href="#4、10-10-12分页" class="headerlink" title="4、10-10-12分页"></a>4、10-10-12分页</h2><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/10-10-12%E5%88%86%E9%A1%B5%E7%BB%93%E6%9E%84.png" alt="10-10-12分页结构"></p><p>0xC0300000</p><p>11 0000 0000    300*4 = C00</p><p>11 0000 0000    300*4= C00                </p><p>000</p><h2 id="5、PDE和PTE"><a href="#5、PDE和PTE" class="headerlink" title="5、PDE和PTE"></a>5、PDE和PTE</h2><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/PDE%E5%92%8CPTE.png" alt="PDE和PTE"></p><p><strong>决定可用内存最大值的是内存分页模式（2-9-9-12,10-10-12），而不是操作系统(32/64)</strong></p><p>*<em>10-10-12最大寻址范围为4gb     4kb(物理页) * 1024(一个PTT1024个PTE) *1024(一个PDT1024个PTT) = 4MB * 1024 =  4G*</em></p><p>&lt;1&gt; PTE可以没有物理页，且只能对应一个物理页.</p><p>&lt;2&gt; 多个PTE也可以指向同一个物理页.</p><p>向0地址写数据代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0x10086</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>,&amp;x);</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span>*)<span class="number">0</span> = <span class="number">1234</span>;            <span class="comment">//用10-10-12找到物理地址  把x的PTE复制给0地址PTE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>,*(<span class="keyword">int</span>*)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-属性位P-RW"><a href="#6-属性位P-RW" class="headerlink" title="6.属性位P/RW"></a>6.属性位P/RW</h2><p><strong>物理页的属性 = PDE属性 &amp; PTE属性</strong></p><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/PRW.png" alt="PRW"></p><ul><li><p><strong>R/W 位</strong></p><p>R/W = 0 只读</p><p>R/W = 1 可读可写</p><p>实验：定义一个只读类型的变量，再另一个线性地址指向相同的物理页，通过修改PDE/PTE属性，实现可写。</p></li><li><p><strong>P位</strong></p><p>线性地址0 为什么不能访问呢？</p><p>没有指定物理页，指定物理页就一定能访问吗？</p><p><strong>先看PDE与PTE的P位 P=1 才是有效的物理页</strong></p></li></ul><h2 id="7-属性位US-PS-A-D"><a href="#7-属性位US-PS-A-D" class="headerlink" title="7.属性位US/PS/A/D"></a>7.属性位US/PS/A/D</h2><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/PRW.png" alt="PRW"></p><ul><li><p><strong>U/S 位</strong></p><p>U/S = 0 特权用户</p><p>U/S = 1 普通用户</p><p>实验： 修改一个高2G线性地址的PDE/PTE属性，实现Ring3可读.比如：0x8003F00C</p></li><li><p><strong>P/S位</strong></p><p> 只对PDE有意义，PS == PageSize的意思 </p><p>当PS==1的时候 PDE直接指向物理页 无PTE,低22位是页内偏移。</p><p>线性地址只能拆成2段：大小为4MB  俗称“大页”</p><p>举例：分析8043F00C线性地址的PDE属性。</p></li><li><p><strong>A 位</strong></p><p>是否被访问（读或者写）过 访问过置1 即使只访问一个字节也会导致PDE PTE置1</p></li><li><p><strong>D 位</strong></p><p>脏位 是否被写过  0没有被写过  1被写过</p></li><li><p><strong>G位 PWT位 PCD位</strong></p><p>学完控制寄存器与TLB才能讲 此处略过。。。</p></li></ul><p>思考题：<strong>一个线性 地址如果可以访问，一定要填上正确的PDE和PTE，但PDE与PTE是物理地址，如果我们想填充，那又必须要通过线性地址才能去访问，谁为访问PDE与PTE的线性地址填充争取的PDE与PTE呢？</strong></p><h2 id="8-页目录表基址"><a href="#8-页目录表基址" class="headerlink" title="8.页目录表基址"></a>8.页目录表基址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">内容回顾</span><br><span class="line"></span><br><span class="line">    在上一节课课后题中我们提到过，如果系统要保证某个线性地址是有效的，</span><br><span class="line">那么必须为其填充正确的PDE与PTE，如果我们想填充PDE与PTE那么必须能够访问</span><br><span class="line">PDT与PTT，那么存在<span class="number">2</span>个问题：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、一定已经有“人”为我们访问PDT与PTT挂好了PDE与PTE,我们只有找到这个线性</span><br><span class="line">地址就可以了。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、这个为我们挂好PDE与PTE的“人”是谁？</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">       CR3中存储的是物理地址，不能在程序中直接读取的。如果想读取，也要把Cr3</span><br><span class="line">的值挂到PDT和PTT中才能访问，那么怎么通过线性地址访问PDT和PTT呢？</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p><strong>拆分C0300000</strong></p><p>结论：C0300000存储的值就是PDT</p><p>如果我们要访问第N个PDE，那么有如下公式：</p><p>0xC0300000 + N*4</p></li><li><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/%E9%A1%B5%E7%9B%AE%E5%BD%95%E8%A1%A8%E5%9F%BA%E5%9D%80.png" alt="页目录表基址"></p></li></ol><h2 id="9-页表基址"><a href="#9-页表基址" class="headerlink" title="9.页表基址"></a>9.页表基址</h2><ol><li><p><strong>拆分C0000000 / C0001000</strong></p></li><li><p><img src="/2020/10/02/6.%E5%86%85%E5%AD%9810-10-12%E5%88%86%E9%A1%B5/%E9%A1%B5%E8%A1%A8%E5%9F%BA%E5%9D%80.png" alt="页表基址"></p><p>问题：页目录表是1024个PTT中的一个，那么只剩1023个常规PTT</p><p>最大寻址范围应该为4KB*1023(PDT算作PTT，只剩下1023个PTT了)*1024(1个PDT1024个PTE)?</p></li><li><p><strong>有了0xC0300000和0xC0000000能做什么？</strong></p><p><strong>掌握了这两个地址，就掌握了一个进程所有的物理内存读写权限。</strong></p><p>公式总结：</p><p>1、什么是PDI与PTI</p><p>10-10-12             PDI:10      PTI:10</p><p>2、访问页目录表的公式：</p><p>0xC0300000 + PDI*4</p><p>3、访问页表的公式：</p><p>0xC0000000 + PDI<em>4096 + PTI</em>4</p></li><li><p><strong>谁为我们填充0xC0300000和0xC0000000的PDE与PTE呢？</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.任务段任务门</title>
      <link href="/2020/10/02/5.%E4%BB%BB%E5%8A%A1%E6%AE%B5%E4%BB%BB%E5%8A%A1%E9%97%A8/"/>
      <url>/2020/10/02/5.%E4%BB%BB%E5%8A%A1%E6%AE%B5%E4%BB%BB%E5%8A%A1%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段描述符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于地址赋值问题</title>
      <link href="/2020/10/01/%E5%85%B3%E4%BA%8E%E5%9C%B0%E5%9D%80%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/01/%E5%85%B3%E4%BA%8E%E5%9C%B0%E5%9D%80%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于地址赋值问题"><a href="#关于地址赋值问题" class="headerlink" title="关于地址赋值问题"></a>关于地址赋值问题</h1><p>1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax,<span class="number">0x0040D760</span>            </span><br><span class="line">mov [esp],eax                </span><br></pre></td></tr></table></figure><p><img src="/2020/10/01/%E5%85%B3%E4%BA%8E%E5%9C%B0%E5%9D%80%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98.png" alt="内存问题"></p><p>2.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov [esp],<span class="number">0x0040D760</span>    </span><br></pre></td></tr></table></figure><p><img src="/2020/10/01/%E5%85%B3%E4%BA%8E%E5%9C%B0%E5%9D%80%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%982.png" alt="内存问题2"></p><p>3.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov dword ptr [esp],<span class="number">0x0040D760</span></span><br></pre></td></tr></table></figure><p><img src="/2020/10/01/%E5%85%B3%E4%BA%8E%E5%9C%B0%E5%9D%80%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%983.png" alt="内存问题3"></p><p>第二种写法只赋值了一个字节，可能默认是1字节</p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windbg </tag>
            
            <tag> 地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.调用门、中断门、陷阱门</title>
      <link href="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/"/>
      <url>/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">要点回顾：</span><br><span class="line">    我们通过JMP FAR可以实现段间的跳转，如果要实现跨段的调用就必须要</span><br><span class="line">学习CALL FAR，也就是长调用.</span><br><span class="line">    CALL FAR 比JMP FAR要复杂，JMP并不影响堆栈,但CALL指令会影响.</span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="四-长短调用"><a href="#四-长短调用" class="headerlink" title="四.长短调用"></a>四.长短调用</h1><h3 id="1、短调用"><a href="#1、短调用" class="headerlink" title="1、短调用"></a>1、短调用</h3><p>指令格式：CALL  立即数/寄存器/内存</p><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E7%9F%AD%E8%B0%83%E7%94%A8.png" alt="短调用"></p><p><strong>发生改变的寄存器：ESP EIP</strong></p><h3 id="2、长调用-跨段不提权"><a href="#2、长调用-跨段不提权" class="headerlink" title="2、长调用(跨段不提权)"></a>2、长调用(跨段不提权)</h3><p> 指令格式：CALL  CS:EIP(EIP是废弃的)</p><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E9%95%BF%E8%B0%83%E7%94%A8%E4%B8%8D%E6%8F%90%E6%9D%83.png" alt="长调用"></p><p><strong>发生改变的寄存器：ESP EIP CS</strong></p><h3 id="3、长调用-跨段并提权"><a href="#3、长调用-跨段并提权" class="headerlink" title="3、长调用(跨段并提权)"></a>3、长调用(跨段并提权)</h3><p> 指令格式：CALL  CS:EIP(EIP是废弃的)</p><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E9%95%BF%E8%B0%83%E7%94%A8%E6%8F%90%E6%9D%83.png" alt="长调用"></p><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E9%95%BF%E8%B0%83%E7%94%A8%E6%8F%90%E6%9D%832.png" alt="长调用"></p><p><strong>发生改变的寄存器：ESP EIP CS SS</strong></p><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><ol><li><p><strong>跨段调用时，一旦有权限切换，就会切换堆栈.</strong></p></li><li><p><strong>CS的权限一旦改变，SS的权限也要随着改变，CS与SS的等级必须一样.</strong></p></li><li><p><strong>JMP FAR 只能跳转到同级非一致代码段，但CALL FAR可以通过调用门</strong></p><p><strong>提权，提升CPL的权限.</strong></p></li></ol><h4 id="SS与ESP从哪里来？参见TSS段"><a href="#SS与ESP从哪里来？参见TSS段" class="headerlink" title="SS与ESP从哪里来？参见TSS段."></a><strong>SS与ESP从哪里来？参见TSS段.</strong></h4><h1 id="调用门EC"><a href="#调用门EC" class="headerlink" title="调用门EC"></a>调用门EC</h1><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E8%B0%83%E7%94%A8%E9%97%A8.png" alt="调用门"></p><h4 id="调用门总结："><a href="#调用门总结：" class="headerlink" title="调用门总结："></a>调用门总结：</h4><ol><li><p>当通过门，权限不变的时候，只会PUSH两个值：CS 返回地址</p><p>新的CS的值由调用门决定</p></li><li><p>当通过门，权限改变的时候，会PUSH四个值：SS ESP CS 返回地址  新的CS的值由调用门决定 新的SS和ESP由TSS提供</p></li><li><p>通过门调用时，要执行哪行代码有调用门决定，但使用RETF返回时，由堆栈中压人的值决定，这就是说，进门时只能按指定路线走，出门时可以翻墙(只要改变堆栈里面的值就可以想去哪去哪)</p></li><li><p>可不可以再建个门出去呢?也就是用Call 当然可以了 前门进 后门出 </p></li></ol><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1、 </p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pushad </span><br><span class="line">pushfd </span><br><span class="line"></span><br><span class="line">​    ...</span><br><span class="line"></span><br><span class="line"> popfd </span><br><span class="line"> popad </span><br></pre></td></tr></table></figure><p><strong>这几行代码有什么意义？是必须的吗？</strong></p><p>2、 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov eax,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>+<span class="number">0x8</span>]</span><br><span class="line"></span><br><span class="line">mov eax,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>+<span class="number">0x8</span>]</span><br><span class="line"></span><br><span class="line">mov eax,[esp+<span class="number">0x24</span>+<span class="number">8</span>+<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>这几行代码在做什么？</strong></p><p><strong>无参调用门代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE GDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD dwH2Gvalue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) GetRegister()</span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax,<span class="number">0x8003F00C</span>            </span><br><span class="line">        mov ebx,[eax]            <span class="comment">//访问高2G内存</span></span><br><span class="line">        mov dwH2Gvalue,ebx        <span class="comment">//获取高2G内存值</span></span><br><span class="line">        sgdt GDT;                <span class="comment">//获取GDT寄存器</span></span><br><span class="line">        mov eax,<span class="number">0xFFFF</span>            <span class="comment">//修改eax的值</span></span><br><span class="line">        retf                    <span class="comment">//返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintRegister</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD GDT_ADDR = *(PDWORD)(&amp;GDT[<span class="number">2</span>]);        </span><br><span class="line">    DWORD GDT_LIMIT = *(PWORD)(&amp;GDT[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X %X %X &quot;</span>,dwH2Gvalue,GDT_ADDR,GDT_LIMIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">6</span>];        </span><br><span class="line"></span><br><span class="line">    *(DWORD*)&amp;buff[<span class="number">0</span>] = <span class="number">0x12345678</span>;    <span class="comment">//随便写</span></span><br><span class="line">    *(WORD*)&amp;buff[<span class="number">4</span>] = <span class="number">0x48</span>;        <span class="comment">//构造调用门</span></span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax,<span class="number">6</span>            <span class="comment">//给eax赋值，最终eax的值为上面的0xFFFF，说明进ring0不保存eax的值</span></span><br><span class="line">        call fword ptr[buff]</span><br><span class="line">    &#125;</span><br><span class="line">    PrintRegister();        <span class="comment">//打印一些数值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>有参调用门代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE GDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) GetRegister()</span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        pushad        <span class="comment">//8个寄存器</span></span><br><span class="line">        pushfd        <span class="comment">//eflags</span></span><br><span class="line">        </span><br><span class="line">        mov eax,dword ptr [esp + <span class="number">0x24</span> + <span class="number">0x8</span> + <span class="number">0x8</span>]    <span class="comment">//0x24是pushad和pushfd 0x8是cs和返回地址 0x8是前面2个参数</span></span><br><span class="line">        mov a,eax</span><br><span class="line">        mov eax,dword ptr [esp + <span class="number">0x24</span> + <span class="number">0x8</span> + <span class="number">0x4</span>]</span><br><span class="line">        mov b,eax</span><br><span class="line">        mov eax,dword ptr [esp + <span class="number">0x24</span> + <span class="number">0x8</span> + <span class="number">0x0</span>]</span><br><span class="line">        mov c,eax</span><br><span class="line"></span><br><span class="line">        popfd</span><br><span class="line">        popad</span><br><span class="line">        retf <span class="number">0xC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPara</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X %X %X&quot;</span>,a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    *(DWORD*)&amp;buff[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">    *(WORD*)&amp;buff[<span class="number">4</span>] = <span class="number">0x48</span>;        <span class="comment">//构造调用门</span></span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        push <span class="number">1</span></span><br><span class="line">        push <span class="number">2</span></span><br><span class="line">        push <span class="number">3</span></span><br><span class="line">        call fword ptr[buff]</span><br><span class="line">    &#125;</span><br><span class="line">    PrintPara();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>从其他地方返回调用门代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BYTE GDT[<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0x00401068</span>;        <span class="comment">//返回到主函数的地址</span></span><br><span class="line"><span class="keyword">int</span> check = <span class="number">0x00401080</span>;        <span class="comment">//检查堆栈平衡的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld\n&quot;</span>);</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        pop edi                                                                </span><br><span class="line">        pop esi</span><br><span class="line">        pop ebx</span><br><span class="line">        add esp,<span class="number">40</span>h</span><br><span class="line">        cmp ebp,esp</span><br><span class="line">        call check</span><br><span class="line">        mov esp,ebp</span><br><span class="line">        pop ebp</span><br><span class="line"></span><br><span class="line">        mov eax,ret</span><br><span class="line">        mov [esp],eax</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __declspec(naked) GetRegister()</span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">int</span> <span class="number">3</span></span><br><span class="line">        mov dword ptr [esp],<span class="number">0x0040D760</span>    </span><br><span class="line">        mov ebx,[esp+<span class="number">0x8</span>]</span><br><span class="line">        retf </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">6</span>];</span><br><span class="line">    </span><br><span class="line">    *(DWORD*)&amp;buff[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">    *(WORD*)&amp;buff[<span class="number">4</span>] = <span class="number">0x48</span>;</span><br><span class="line">    </span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        call fword ptr[buff]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov esp,ebx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="中断门EE"><a href="#中断门EE" class="headerlink" title="中断门EE"></a>中断门EE</h1><p>Windows没有使用调用门，但是使用了中断门：</p><ul><li><p>系统调用</p></li><li><p>调试</p></li></ul><h3 id="1、IDT"><a href="#1、IDT" class="headerlink" title="1、IDT"></a>1、IDT</h3><p> IDT即中断描述符表,同GDT一样，IDT也是由一系列描述符组成的，每个描述符占8个字节。但要注意的是，IDT表中的第一个元素不是NULL。</p><p>在windbg中查看IDT表的基址和长度:</p><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E4%B8%AD%E6%96%AD%E9%97%A81.png" alt="中断门1"></p><h3 id="2、IDT表的构成"><a href="#2、IDT表的构成" class="headerlink" title="2、IDT表的构成"></a>2、IDT表的构成</h3><p>IDT表可以包含3种门描述符：</p><ul><li>任务门描述符</li><li>中断门描述符</li><li>陷阱门描述符 </li></ul><h3 id="3、中断门描述符"><a href="#3、中断门描述符" class="headerlink" title="3、中断门描述符"></a>3、中断门描述符</h3><p> <img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E4%B8%AD%E6%96%AD%E9%97%A82.png" alt="中断门2"></p><h3 id="4、构造一个中断门"><a href="#4、构造一个中断门" class="headerlink" title="4、构造一个中断门"></a>4、构造一个中断门</h3><p>参考代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">DWORD val;        <span class="comment">//全局变量不初始化默认为0</span></span><br><span class="line"><span class="keyword">void</span> _declspec(naked)func()</span><br><span class="line">&#123;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        pushad</span><br><span class="line">        pushfd</span><br><span class="line">            </span><br><span class="line">        mov eax,<span class="number">0x8003f400</span></span><br><span class="line">        mov ebx,dword ptr [eax]</span><br><span class="line">        mov val,ebx</span><br><span class="line">            </span><br><span class="line">        popfd</span><br><span class="line">        popad</span><br><span class="line">            </span><br><span class="line">        iretd    <span class="comment">//返回        iret是用来返回16位的中断门</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="number">0x20</span>        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="陷阱门EF"><a href="#陷阱门EF" class="headerlink" title="陷阱门EF"></a>陷阱门EF</h1><h3 id="1、陷阱门描述符"><a href="#1、陷阱门描述符" class="headerlink" title="1、陷阱门描述符"></a>1、陷阱门描述符</h3><p><img src="/2020/04/21/4.%E8%B0%83%E7%94%A8%E4%B8%AD%E6%96%AD%E9%99%B7%E9%98%B1/%E9%99%B7%E9%98%B1%E9%97%A81.png" alt="中断门2"></p><h3 id="2、陷阱门与中断门的区别"><a href="#2、陷阱门与中断门的区别" class="headerlink" title="2、陷阱门与中断门的区别"></a>2、陷阱门与中断门的区别</h3><p><strong>中断门执行时，将IF位清零,但陷阱门不会。</strong></p><h3 id="3、构造一个陷阱门"><a href="#3、构造一个陷阱门" class="headerlink" title="3、构造一个陷阱门"></a>3、构造一个陷阱门</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">DWORD val;        <span class="comment">//全局变量不初始化默认为0</span></span><br><span class="line"><span class="keyword">void</span> _declspec(naked)func()</span><br><span class="line">&#123;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        pushad</span><br><span class="line">        pushfd</span><br><span class="line">            </span><br><span class="line">        mov eax,<span class="number">0x8003f400</span></span><br><span class="line">        mov ebx,dword ptr [eax]</span><br><span class="line">        mov val,ebx</span><br><span class="line">            </span><br><span class="line">        popfd</span><br><span class="line">        popad</span><br><span class="line">            </span><br><span class="line">        iretd    <span class="comment">//返回        iret是用来返回16位的中断门</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="number">0x20</span>        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段描述符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.codedata与系统段</title>
      <link href="/2020/04/20/3.%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/04/20/3.%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">要点回顾</span><br><span class="line"></span><br><span class="line">段寄存器:</span><br><span class="line">ES,CS,SS,DS,FS,GS,LDTR,TR</span><br><span class="line"></span><br><span class="line">段寄存器读写：</span><br><span class="line">除CS外，其他的段寄存器都可以通过MOV,LES,LSS,LDS,LFS,LGS指令进行修改 </span><br><span class="line"></span><br><span class="line">CS为什么不可以直接修改呢？</span><br><span class="line">CS的改变意味着EIP的改变，改变CS的同时必须修改EIP,所以我们无法使用上面的指令来进行修改. </span><br><span class="line">    cs.base + eip = 真正的地址</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="三-代码跨段跳转流程"><a href="#三-代码跨段跳转流程" class="headerlink" title="三.代码跨段跳转流程"></a>三.代码跨段跳转流程</h1><h2 id="1、代码间的跳转（段间跳转-非调用门之类的）"><a href="#1、代码间的跳转（段间跳转-非调用门之类的）" class="headerlink" title="1、代码间的跳转（段间跳转 非调用门之类的）"></a>1、代码间的跳转（段间跳转 非调用门之类的）</h2><p>段间跳转，有2种情况，即要跳转的段是<code>一致代码段</code>还是<code>非一致代码段</code></p><p>同时修改CS与EIP的指令：JMP FAR / CALL FAR / RETF / INT /IRETED </p><p>注意：</p><p>只改变EIP的指令</p><p>JMP / CALL / JCC / RET </p><h2 id="2、代码间的跳转-段间跳转-非调用门之类的-执行流程"><a href="#2、代码间的跳转-段间跳转-非调用门之类的-执行流程" class="headerlink" title="2、代码间的跳转(段间跳转 非调用门之类的) 执行流程"></a>2、代码间的跳转(段间跳转 非调用门之类的) 执行流程</h2><p><strong>JMP 0x20:0x004183D7 CPU如何执行这行代码?</strong></p><ol><li><p><strong>段选择子拆分</strong></p><p> 0x20 对应二进制形式 0000 0000 0010 0000</p><p> RPL = 00  </p><p> TI = 0</p><p> Index = 4</p></li><li><p><strong>查表得到段描述符</strong></p><p>TI = 0 所以查GDT表</p><p> Index = 4 找到对应的段描述符</p><p> 四种情况可以跳转：<strong>代码段、调用门、TSS任务段、任务门</strong></p></li><li><p><strong>权限检查</strong></p><p>如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL</p><p> 如果是一致代码段，要求:CPL &gt;= DPL</p></li><li><p><strong>加载段描述符</strong></p><p>通过上面的权限检查后，CPU会将段描述符加载到CS段寄存器中.</p></li><li><p><strong>代码执行</strong></p><p>CPU将 CS.Base + Offset 的值写入EIP 然后执行CS:EIP处的代码，段间跳转结束. </p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h4><h5 id="对于一致代码段-也就是共享的段"><a href="#对于一致代码段-也就是共享的段" class="headerlink" title="对于一致代码段:也就是共享的段"></a>对于一致代码段:也就是共享的段</h5><p>  □ 特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据</p><p>  □ 特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态</p><h5 id="对于普通代码段：也就是非一致代码段"><a href="#对于普通代码段：也就是非一致代码段" class="headerlink" title="对于普通代码段：也就是非一致代码段"></a>对于普通代码段：也就是非一致代码段</h5><p>  □ 只允许同级访问</p><p>  □ 绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态.</p></li></ol><p>   <strong>直接对代码段进行JMP 或者 CALL的操作，无论目标是一致代码段还是非一致代码段，CPL都不会发生改变.如果要提升CPL的权限，只能通过调用门.</strong></p><p>1、为了对数据进行保护，普通代码段是禁止不同级别进行访问的。用户态的代码不能访问内核的数据，同样，内核态的代码也不能访问用户态的数据.</p><p>2、如果想提供一些通用的功能，而且这些功能并不会破坏内核数据，那么可以选择一致代码段，这样低级别的程序可以在不提升CPL权限等级的情况下即可以访问.</p><p>3、如果想访问普通代码段，只有通过“调用门”等提示CPL权限，才能访问。</p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段描述符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.段描述符各种属性</title>
      <link href="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
      <url>/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="二-段描述符和段选择子"><a href="#二-段描述符和段选择子" class="headerlink" title="二.段描述符和段选择子"></a>二.段描述符和段选择子</h1><h4 id="前景提要-上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？"><a href="#前景提要-上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？" class="headerlink" title="前景提要:上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？"></a><strong>前景提要:上一节内容我们讲过，当写一个段寄存器的时候，只给了一个16位的数，但段寄存器有96位，那剩下的80位从哪里来的？这个16位的数是随便写的吗？</strong></h4><a id="more"></a><h3 id="1、GDT-全局描述符表-和LDT-局部描述符表"><a href="#1、GDT-全局描述符表-和LDT-局部描述符表" class="headerlink" title="1、GDT(全局描述符表)和LDT(局部描述符表)"></a>1、GDT(全局描述符表)和LDT(局部描述符表)</h3><h5 id="当我们执行类似MOV-DS-AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT-查找表的什么位置-查出多少数据"><a href="#当我们执行类似MOV-DS-AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT-查找表的什么位置-查出多少数据" class="headerlink" title="当我们执行类似MOV DS,AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT,查找表的什么位置,查出多少数据."></a>当我们执行类似MOV DS,AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT,查找表的什么位置,查出多少数据.</h5><h5 id="gdtr寄存器-48位-存储了2个值，gdt的地址和大小"><a href="#gdtr寄存器-48位-存储了2个值，gdt的地址和大小" class="headerlink" title="gdtr寄存器(48位)存储了2个值，gdt的地址和大小"></a>gdtr寄存器(48位)存储了2个值，gdt的地址和大小</h5><p>Windbg指令</p><ul><li>r gdtr        //查看gdt表的位置(0x8003F000 )</li><li>r gdtl         //查看gdt表的大小(0x3FF)</li><li>dd(dword)  4字节显示地址</li><li>dq(qword)  8字节显示地址(用`连接)  ==高位在前低位在后==</li><li>dq 8003F000 L40(显示40组)</li></ul><h3 id="2、段描述符-GDT表里存储的元素"><a href="#2、段描述符-GDT表里存储的元素" class="headerlink" title="2、段描述符:GDT表里存储的元素"></a>2、段描述符:GDT表里存储的元素</h3><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6.png" alt="段描述符"></p><h3 id="3、段选择子-段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符"><a href="#3、段选择子-段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符" class="headerlink" title="3、段选择子:段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符."></a>3、段选择子:段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符.</h3><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90.png" alt="段选择子"></p><p><strong><em>RPL：请求特权级别</em></strong></p><p><strong>TI=0 查GDT表</strong></p><p><strong>TI=1 查LDT表</strong></p><p><strong>Index：处理器将索引值乘以8在加上GDT或者LDT的基地址，就是要加载的段描述符</strong></p><h3 id="4、加载段描述符至段寄存器"><a href="#4、加载段描述符至段寄存器" class="headerlink" title="4、加载段描述符至段寄存器"></a>4、加载段描述符至段寄存器</h3><h5 id="除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器"><a href="#除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器" class="headerlink" title="除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器."></a>除了MOV指令，我们还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器.</h5><h5 id="CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲"><a href="#CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲" class="headerlink" title="CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲."></a>CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">6</span>];                    </span><br><span class="line">__asm                            </span><br><span class="line">&#123;            </span><br><span class="line">    les ecx,fword ptr ds:[buffer] <span class="comment">//高2个字节给es，低四个字节给ecx    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注意：RPL-lt-DPL-在数值上"><a href="#注意：RPL-lt-DPL-在数值上" class="headerlink" title="注意：RPL&lt;=DPL(在数值上)"></a>注意：RPL&lt;=DPL(在数值上)</h5><h3 id="5、段描述符与段寄存器的对应关系"><a href="#5、段描述符与段寄存器的对应关系" class="headerlink" title="5、段描述符与段寄存器的对应关系"></a>5、段描述符与段寄存器的对应关系</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WORD Selector; <span class="comment">//16位</span></span><br><span class="line"></span><br><span class="line">WORD Atrribute; <span class="comment">//16位</span></span><br><span class="line"></span><br><span class="line">DWORD Base; <span class="comment">//32位</span></span><br><span class="line"></span><br><span class="line">DWORD Limit; <span class="comment">//32位   FFFFFFFF </span></span><br></pre></td></tr></table></figure><hr><h3 id="6、段描述符PG位P位"><a href="#6、段描述符PG位P位" class="headerlink" title="6、段描述符PG位P位"></a>6、段描述符PG位P位</h3><p><strong>P = 1 段描述符有效</strong></p><p><strong>P = 0 段描述符无效</strong></p><p>G位决定了Limit</p><p><strong>G = 0 Limit 代表以字节为单位 最大为0xFFFFF</strong>(==因为段描述符里limit只占20位==)</p><p><strong>G = 1 Limit 代表以4kb为单位 最大为FFFFF x FFF(4096-1)=0xFFFFFFFF</strong></p><p>==<strong>FS对应的段描述符比较特殊，查分后的值与段寄存器中的值不符合，讲到操作系统（线程）的时候会解释.</strong>==</p><h3 id="7、S位和TYPE域"><a href="#7、S位和TYPE域" class="headerlink" title="7、S位和TYPE域"></a>7、S位和TYPE域</h3><p><strong>S = 1 代码段或者数据段描述符</strong></p><p><strong>S = 0 系统段描述符</strong> </p><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/codeanddata.png" alt="code and data"></p><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E7%B3%BB%E7%BB%9F%E6%AE%B5.png" alt="系统段"></p><p><strong>数据段说明</strong></p><p><strong>A 访问位，表示该位最后一次被操作系统清零后，该段是否被访问过.每当处理器将该段选择符置入某个段寄存器时，就将该位置1.</strong></p><p><strong>W 是否可写</strong></p><p><strong>E 扩展方向</strong><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%89%A9%E5%B1%95%E6%96%B9%E5%90%91.png" alt="扩展方向"></p><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%AF%B4%E6%98%8E.png" alt="代码段说明"></p><h3 id="8、D-B位"><a href="#8、D-B位" class="headerlink" title="8、D/B位"></a>8、D/B位</h3><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/DB%E4%BD%8D.png" alt="DB位"></p><h5 id="情况一：对CS段的影响"><a href="#情况一：对CS段的影响" class="headerlink" title="情况一：对CS段的影响"></a>情况一：对CS段的影响</h5><pre><code>D = 1 采用32位寻址方式    D = 0 采用16位寻址方式    前缀67 改变默认寻址方式      32变16  16变32</code></pre><h5 id="情况二：对SS段的影响"><a href="#情况二：对SS段的影响" class="headerlink" title="情况二：对SS段的影响"></a>情况二：对SS段的影响</h5><pre><code>D = 1 隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP    D = 0 隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP    </code></pre><h5 id="情况三：向下拓展的数据段"><a href="#情况三：向下拓展的数据段" class="headerlink" title="情况三：向下拓展的数据段"></a>情况三：向下拓展的数据段</h5><pre><code>D = 1 段上线为4GB    D = 0 段上线为64KB    </code></pre><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/DB%E5%BD%B1%E5%93%8D%E6%89%A9%E5%B1%95.png" alt="DB影响扩展"></p><h3 id="9、段权限检查"><a href="#9、段权限检查" class="headerlink" title="9、段权限检查"></a>9、段权限检查</h3><h5 id="CPU分级：1、2环-windows不使用，windows只有ring0和ring3"><a href="#CPU分级：1、2环-windows不使用，windows只有ring0和ring3" class="headerlink" title="CPU分级：1、2环 windows不使用，windows只有ring0和ring3"></a>CPU分级：1、2环 windows不使用，windows只有ring0和ring3</h5><h5 id><a href="#" class="headerlink" title></a><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/CPU%E5%88%86%E7%BA%A7.png" alt="CPU分级"></h5><h5 id="如何查看程序处于几环"><a href="#如何查看程序处于几环" class="headerlink" title="如何查看程序处于几环?"></a>如何查看程序处于几环?</h5><p>CPL(Current Privilege Level) ：当前特权级  </p><p>CS和SS中存储的段选择子后2位. </p><p>用windbg是在ring 0，用DTdebug是在ring3</p><p><img src="/2020/04/19/2.%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/%E6%9F%A5%E7%9C%8BCPL.png" alt="查看CPL"></p><h5 id="DPL-Descriptor-Privilege-Level-描述符特权级别"><a href="#DPL-Descriptor-Privilege-Level-描述符特权级别" class="headerlink" title="DPL(Descriptor Privilege Level) 描述符特权级别"></a>DPL(Descriptor Privilege Level) 描述符特权级别</h5><p>DPL存储在段描述符中，规定了访问该段**==所需要的特权级别==**是什么.</p><p>通俗的理解：</p><p>如果你想访问我，那么你应该具备什么特权.  </p><p>举例说明：mov DS,AX </p><p>如果AX指向的段DPL = 0 但当前程序的CPL = 3 这行指令是不会成功的！</p><h5 id="RPL-Request-Privilege-Level-请求特权级别"><a href="#RPL-Request-Privilege-Level-请求特权级别" class="headerlink" title="RPL(Request Privilege Level) 请求特权级别"></a>RPL(Request Privilege Level) 请求特权级别</h5><p>RPL是针对段选择子而言的，每个段的选择子都有自己的RPL。</p><h5 id="数据段的权限检查"><a href="#数据段的权限检查" class="headerlink" title="数据段的权限检查"></a><strong>数据段的权限检查</strong></h5><p>参考如下代码：</p><p>比如当前程序处于0环，也就是说CPL=0</p><p>Mov ax,000B //1011  RPL = 3</p><p>Mov ds,ax //ax指向的段描述符的DPL = 0</p><p>数据段的权限检查：**==CPL &lt;= DPL 并且 RPL &lt;= DPL==** (数值上的比较)</p><p><strong>注意：代码段和系统段描述符中的检查方式并不一样</strong></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong><em>CPL CPU当前的权限级别</em></strong></p><p><strong><em>DPL 如果你想访问我，你应该具备什么样的权限</em></strong></p><p><strong><em>RPL 用什么权限去访问一个段</em></strong></p><p><strong><em>为啥要有RPL?</em></strong></p><p>   <strong><em>我们本可以用“读 写”的权限去打开一个文件，但为了避免出错，有些时候我们使用“只读”的权限去打开。</em></strong></p><h3 id="推荐书籍-内核"><a href="#推荐书籍-内核" class="headerlink" title="推荐书籍(内核):"></a>推荐书籍(内核):</h3><h3 id="毛德操-内核情景分析-React-OS山寨window"><a href="#毛德操-内核情景分析-React-OS山寨window" class="headerlink" title="毛德操-内核情景分析(React OS山寨window)"></a><a href="https://book.douban.com/subject/3715700/">毛德操-内核情景分析</a>(React OS山寨window)</h3><h3 id="潘爱民-Windows内核原理与实现-WRK-微软公布的一部分"><a href="#潘爱民-Windows内核原理与实现-WRK-微软公布的一部分" class="headerlink" title="潘爱民-Windows内核原理与实现(WRK 微软公布的一部分)"></a><a href="https://book.douban.com/subject/3715700/">潘爱民-Windows内核原理与实现</a>(WRK 微软公布的一部分)</h3>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段描述符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.段寄存器属性探测</title>
      <link href="/2020/04/18/1.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/18/1.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一-保护模式和段寄存器"><a href="#一-保护模式和段寄存器" class="headerlink" title="一.保护模式和段寄存器"></a>一.保护模式和段寄存器</h1><h2 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h2><h3 id="1-什么是保护模式？"><a href="#1-什么是保护模式？" class="headerlink" title="1.什么是保护模式？"></a>1.什么是保护模式？</h3><p>x64 CPU的3个模式:实模式、保护模式和虚拟8086模式。</p><h3 id="2-为什么不直接讲x64的？"><a href="#2-为什么不直接讲x64的？" class="headerlink" title="2.为什么不直接讲x64的？"></a>2.为什么不直接讲x64的？</h3><p>X86是由Intel推出的一种复杂指令集，能够生产支持这种指令集CPU公司主要是Intel和AMD.   </p><p>AMD在1999年的时候，拓展了这套指令集，称为x86-64，后改名为AMD64，Intel也兼容了这个产品，称为Intel64.但AMD64和Intel64几乎是一样的，所以在很多资料中统称为×64.   </p><p><strong>这套指令集是对×86的拓展，向下兼容的.</strong>   </p><a id="more"></a><h3 id="3-保护模式有什么特点？"><a href="#3-保护模式有什么特点？" class="headerlink" title="3.保护模式有什么特点？"></a>3.保护模式有什么特点？</h3><ul><li><strong>段的机制</strong>   </li><li>**页的机制 **  </li></ul><h3 id="4-学习保护模式有什么用？"><a href="#4-学习保护模式有什么用？" class="headerlink" title="4.学习保护模式有什么用？"></a>4.学习保护模式有什么用？</h3><p><strong>真正理解内核是如何运作的</strong></p><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><h3 id="1、什么是段寄存器？有哪些？"><a href="#1、什么是段寄存器？有哪些？" class="headerlink" title="1、什么是段寄存器？有哪些？"></a>1、什么是段寄存器？有哪些？</h3><p>当我们用汇编读写某一个地址时：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov dword ptr ds:[<span class="number">0x123456</span>],eax</span><br></pre></td></tr></table></figure><p>我们真正读写的地址是：<strong>ds.base</strong>+0×123456</p><p>ES CS SS DS FS GS LDTR TR 共8个</p><h3 id="2、段寄存器的结构"><a href="#2、段寄存器的结构" class="headerlink" title="2、段寄存器的结构"></a>2、段寄存器的结构</h3><p><img src="/2020/04/18/1.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E6%88%90%E5%91%98.png" alt="段寄存器"></p><h3 id="3、段寄存器的读写"><a href="#3、段寄存器的读写" class="headerlink" title="3、段寄存器的读写"></a>3、段寄存器的读写</h3><ul><li><p>读段寄存器</p><p> 比如:<code>MOV AX,ES</code>只能==读16位==的可见部分</p><p> 读写LDTR的指令为：  SLDT/LLDT</p><p> 读写TR的指令为：STR/LTR</p></li><li><p>写段寄存器</p><p>比如：<code>MOV DS,AX</code>写时是==写96位==</p></li></ul><h2 id="段寄存器属性探测"><a href="#段寄存器属性探测" class="headerlink" title="段寄存器属性探测"></a>段寄存器属性探测</h2><h3 id="1-段寄存器只能看见16位，如何证明有96位？"><a href="#1-段寄存器只能看见16位，如何证明有96位？" class="headerlink" title="1. 段寄存器只能看见16位，如何证明有96位？"></a>1. 段寄存器只能看见16位，如何证明有96位？</h3><h4 id="1-1、段寄存器成员简介"><a href="#1-1、段寄存器成员简介" class="headerlink" title="1.1、段寄存器成员简介"></a>1.1、段寄存器成员简介</h4><h3 id><a href="#" class="headerlink" title></a><img src="/2020/04/18/1.%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E6%88%90%E5%91%98.png" alt="段寄存器成员"></h3><h4 id="1-2、探测Attribute"><a href="#1-2、探测Attribute" class="headerlink" title="1.2、探测Attribute"></a>1.2、探测Attribute</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,ss <span class="comment">//ss可读可写</span></span><br><span class="line">        mov ds,ax </span><br><span class="line">        mov dword ptr ds:[var],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,cs <span class="comment">//cs可读可执行  不可写</span></span><br><span class="line">        mov ds,ax </span><br><span class="line">        mov dword ptr ds:[var],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>cs可读可执行==不可写==</strong>,所以下面的代码执行会报错，由此证明Attribute(权限)存在</p><h4 id="1-3、探测base"><a href="#1-3、探测base" class="headerlink" title="1.3、探测base"></a>1.3、探测base</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,fs</span><br><span class="line">        mov gs,ax</span><br><span class="line">        mov eax,gs:[<span class="number">0</span>]    <span class="comment">//不能使用ds 否则会出错(vc6) 原因可能与编译器有关</span></span><br><span class="line">        <span class="comment">//相当于</span></span><br><span class="line">        <span class="comment">//mov eax,dword ptr ds:[0x7FFDF000]   //这个地址是可以访问的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="这里有2个细节"><a href="#这里有2个细节" class="headerlink" title="这里有2个细节"></a>这里有2个细节</h6><ol><li><p><strong>0地址为保留地址，不可读不可写</strong></p></li><li><p><strong>不能在有关GS寄存器的地方下断点</strong></p><p>理由:下断点单步调试需要不断进出ring0，GS是被Windows废弃的寄存器，只要一进ring0就会被内核清空，如果你在mov gs,ax下断点，就会导致GS进ring0直接被清空,GS的值为NULL,所以会导致0xC0000005错误</p></li></ol><h4 id="1-4、探测limit"><a href="#1-4、探测limit" class="headerlink" title="1.4、探测limit"></a>1.4、探测limit</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">0</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov ax,fs             </span><br><span class="line">        mov gs,ax</span><br><span class="line">           <span class="comment">//mov eax,gs:[0x1000] //0x7FFDF000+0x1000  0x1000 &gt;fs.limit=0xFFF </span></span><br><span class="line">        <span class="comment">//访问的地址相当于下面的 ds.limit=0xFFFFFFFF</span></span><br><span class="line">        mov eax,dword ptr ds:[<span class="number">0x7FFDF000</span>+<span class="number">0x1000</span>]</span><br><span class="line">        mov dword ptr ds:[var],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-写段寄存器时只给了16位，剩下的80位填什么？"><a href="#2-写段寄存器时只给了16位，剩下的80位填什么？" class="headerlink" title="2. 写段寄存器时只给了16位，剩下的80位填什么？"></a>2. 写段寄存器时只给了16位，剩下的80位填什么？</h3><h4 id="具体见下节内容"><a href="#具体见下节内容" class="headerlink" title="具体见下节内容"></a>具体见下节内容</h4>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 段寄存器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双机调试</title>
      <link href="/2020/04/17/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>/2020/04/17/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="环境-win7-物理机-xp-sp3-虚拟机vm10"><a href="#环境-win7-物理机-xp-sp3-虚拟机vm10" class="headerlink" title="环境:win7(物理机)+xp sp3(虚拟机vm10)"></a>环境:win7(物理机)+xp sp3(虚拟机vm10)</h3><h4 id="采坑1-在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示"><a href="#采坑1-在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示" class="headerlink" title="采坑1.在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示"></a>采坑1.<strong>在虚拟机添加串口之前，请先检查是否有打印机，如果有请删除，否则你创建的串口将会如下图所示</strong></h4><p><img src="/2020/04/17/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/01.png" alt="替代文字"></p><a id="more"></a><h6 id="如果是图上这种情况-你必须要在boot-ini的配置里填上com-2才行，而不是后面显示的-pipe-com-1"><a href="#如果是图上这种情况-你必须要在boot-ini的配置里填上com-2才行，而不是后面显示的-pipe-com-1" class="headerlink" title="如果是图上这种情况  你必须要在boot.ini的配置里填上com_2才行，而不是后面显示的\pipe\com_1"></a>如果是图上这种情况  你必须要在boot.ini的配置里填上com_2才行，而不是后面显示的\pipe\com_1</h6><h6 id="因此为了避免麻烦-建议创建虚拟机的时候就将打印机删除-并且添加串口，此时效果如下图"><a href="#因此为了避免麻烦-建议创建虚拟机的时候就将打印机删除-并且添加串口，此时效果如下图" class="headerlink" title="因此为了避免麻烦 建议创建虚拟机的时候就将打印机删除 并且添加串口，此时效果如下图"></a>因此为了避免麻烦 建议创建虚拟机的时候就将打印机删除 并且添加串口，此时效果如下图</h6><h4 id="采坑2-原先用wdk7600发现没有符号。"><a href="#采坑2-原先用wdk7600发现没有符号。" class="headerlink" title="采坑2.原先用wdk7600发现没有符号。"></a>采坑2.原先用wdk7600发现没有符号。</h4><h6 id="解决方案-下载sp3的符号包"><a href="#解决方案-下载sp3的符号包" class="headerlink" title="解决方案:下载sp3的符号包"></a>解决方案:下载sp3的符号包</h6><h6 id="Windbg-Symbols安装包（提取码：fvva）"><a href="#Windbg-Symbols安装包（提取码：fvva）" class="headerlink" title="Windbg+Symbols安装包（提取码：fvva）"></a><a href="https://pan.baidu.com/s/18kXlY7WKhaE7S5VnSLR-1Q">Windbg+Symbols</a>安装包（提取码：fvva）</h6><h4 id="默认安装在C-Windows-Symbol"><a href="#默认安装在C-Windows-Symbol" class="headerlink" title="默认安装在C:\Windows\Symbol"></a>默认安装在C:\Windows\Symbol</h4><p><img src="/2020/04/17/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/2.png" alt="替代文字"><br><img src="/2020/04/17/%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/3.png" alt="替代文字"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 双机调试 </tag>
            
            <tag> windbg </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
